// Code generated by protoc-gen-grpc-gateway-interceptor. DO NOT EDIT.
// versions:
// - protoc-gen-grpc-gateway-interceptor v1.0.0
// - protoc                               v3.9.1

// source: example/routeguide/route_guide.proto

package routeguide

import (
	context "context"
	grpc "google.golang.org/grpc"
)

// RouteGuideWithInterceptor implements RouteGuide interface with interceptor
type RouteGuideWithInterceptor struct {
	unaryInter  grpc.UnaryServerInterceptor
	streamInter grpc.StreamServerInterceptor
	server      RouteGuideServer
}

// RegisterRouteGuide returns a new RouteGuideWithInterceptor instance
func RegisterRouteGuide(srv RouteGuideServer, unaryInter grpc.UnaryServerInterceptor, streamInter grpc.StreamServerInterceptor) RouteGuideServer {
	return &RouteGuideWithInterceptor{
		unaryInter:  unaryInter,
		streamInter: streamInter,
		server:      srv,
	}
}

// GetFeature implements with interceptor
func (srv *RouteGuideWithInterceptor) GetFeature(ctx context.Context, req *Point) (*Feature, error) {
	if srv.unaryInter == nil {
		return srv.server.GetFeature(ctx, req)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routeguide.RouteGuide/GetFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.server.GetFeature(ctx, req.(*Point))
	}
	resp, err := srv.unaryInter(ctx, req, info, handler)
	if err != nil {
		return nil, err
	}
	return resp.(*Feature), nil
}

// ListFeatures implements with interceptor
func (srv *RouteGuideWithInterceptor) ListFeatures(req *Rectangle, stream RouteGuide_ListFeaturesServer) error {
	if srv.streamInter == nil {
		return srv.server.ListFeatures(req, stream)
	}
	info := &grpc.StreamServerInfo{
		FullMethod:     "/routeguide.RouteGuide/ListFeatures",
		IsClientStream: false,
		IsServerStream: true,
	}
	handler := func(s interface{}, ss grpc.ServerStream) error {
		return s.(*RouteGuideWithInterceptor).server.ListFeatures(req, stream)
	}
	return srv.streamInter(srv, stream, info, handler)
}

// RecordRoute implements with interceptor
func (srv *RouteGuideWithInterceptor) RecordRoute(stream RouteGuide_RecordRouteServer) error {
	if srv.streamInter == nil {
		return srv.server.RecordRoute(stream)
	}
	info := &grpc.StreamServerInfo{
		FullMethod:     "/routeguide.RouteGuide/RecordRoute",
		IsClientStream: true,
		IsServerStream: false,
	}
	handler := func(s interface{}, ss grpc.ServerStream) error {
		return s.(*RouteGuideWithInterceptor).server.RecordRoute(stream)
	}
	return srv.streamInter(srv, stream, info, handler)
}

// RouteChat implements with interceptor
func (srv *RouteGuideWithInterceptor) RouteChat(stream RouteGuide_RouteChatServer) error {
	if srv.streamInter == nil {
		return srv.server.RouteChat(stream)
	}
	info := &grpc.StreamServerInfo{
		FullMethod:     "/routeguide.RouteGuide/RouteChat",
		IsClientStream: true,
		IsServerStream: true,
	}
	handler := func(s interface{}, ss grpc.ServerStream) error {
		return s.(*RouteGuideWithInterceptor).server.RouteChat(stream)
	}
	return srv.streamInter(srv, stream, info, handler)
}
